spring:
  cloud:
    config:
      import-check:
        enabled: false
  zipkin:
    enabled: true
    base-url: http://172.21.0.61:9411    

server:
  port: 8186

logging:
  level:
    root: DEBUG
    com:
      itl: DEBUG
    org:
      springframework:
        web: INFO
      hibernate: ERROR

eureka:
  instance:
    #hostname: 172.21.0.61
    hostname: localhost
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 20
  client:
    registerWithEureka: true   #telling the server not to register himself in the service registry
    fetchRegistry: true
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
      
resilience4j:
  circuitbreaker:
    instances:
      customerService:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        waitDurationInOpenState: 5s
        slidingWindowType: COUNT_BASED 
#  retry:
#    configs:
#      default:
#        maxAttempts: 1
#        waitDuration: 100
#      instances:
#        retryService:
#            maxAttempts: 3
#            waitDuration: 10000

resilience4j.bulkhead:
    instances:
        bulkhead:   
            maxWaitDuration: 3000
            maxConcurrentCalls: 5 

resilience4j.thread-pool-bulkhead:
  instances:
    poolbulkhead:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1        
    
management:
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}
  security:
    enabled: false  #disable the spring security on the management endpoints like /env, /refresh etc. 

# work on swarm
#    preferIpAddress: ${PREFER_IP_ADDRESS:false}
    # enable to register multiple app instances with a random server port
#    instance-id: ${spring.application.name}:${random.uuid}
#    leaseRenewalIntervalInSeconds: ${LEASE_RENEWAL_INTERVAl_IN_SECONDS:10}
#    leaseExpirationDurationInSeconds: ${LEASE_EXPIRATION_DURATIONIN_SECONDS:20}